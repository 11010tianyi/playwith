#summary What the examples look like.
#labels Featured

= Examples from `help(playwith)` =

== time series plot ==
{{{
## time series plot (base graphics)
treering2 <- window(treering, start=1)
playwith(plot(treering2, xlim=c(0,300)), 
	labels = paste(time(treering2), "CE"))
}}}
http://playwith.googlecode.com/files/screenshot_1-01_timeseries.png

== multi-panel lattice plot ==
{{{
## multi-panel lattice plot
playwith(xyplot(Income ~ log(Population / Area) | state.region, 
	data = data.frame(state.x77), subscripts=TRUE), 
	label.style = gpar(col="red", fontfamily="HersheySans",
	cex=0.7))
}}}
http://playwith.googlecode.com/files/screenshot_1-02_panels.png

== interactive control of a parameter with a slider ==
{{{
## interactive control of a parameter with a slider
xx <- rnorm(50)
playwith(plot(density(xx, bw = bandwidth), panel.last = rug(xx)),
	parameters = list(bandwidth = seq(0.05, 1, by=0.01)))
}}}
http://playwith.googlecode.com/files/screenshot_2-01_slider.png

== more parameters ==
{{{
## more parameters
playwith(stripplot(yield ~ site, data = barley,
    jitter=TRUE, type=c("p","a"),
    aspect=aspect, groups=barley[[groups]],
    scales=list(abbreviate=abbrev),
    par.settings=list(plot.line=list(col=linecol))),
  parameters = list(abbrev=FALSE, aspect=0.5,
                    groups=c("none", "year", "variety"),
                    linecol="red"))
}}}
http://playwith.googlecode.com/files/screenshot_2-02_parameters.png

== brushing a multivariate scatterplot ==
{{{
## brushing a multivariate scatterplot
playwith(splom(environmental))
}}}
http://playwith.googlecode.com/files/screenshot_1-04_brushing.png

== simple spin and zoom for a 3D plot ==
{{{
## simple spin and zoom for a 3D plot
playwith(wireframe(volcano, drape=TRUE))
}}}
http://playwith.googlecode.com/files/screenshot_1-05_3d.png

== annotation dialog box ==
This dialog box comes up when the user clicks on the plot to place
an annotation. Note that you can click _Preview_ to draw the text,
then change the settings and try again.

http://playwith.googlecode.com/files/screenshot_1-06a_annotation.png

== ggplot ==
{{{
## ggplot (NOTE: only qplot()-based calls will work)
## labels come from data frame automatically
library(ggplot2)
playwith(qplot(qsec, wt, data=mtcars) + stat_smooth())
}}}
http://playwith.googlecode.com/files/screenshot_2-03_ggplot.png

== a minimalist grid plot ==
{{{
## a minimalist grid plot
gridPlot <- function(x, y, xlim = NULL, ylim = NULL) {
	if (is.null(xlim)) xlim <- extendrange(x)
	if (is.null(ylim)) ylim <- extendrange(y)
	grid.newpage()
	pushViewport(plotViewport())
	grid.rect()
	pushViewport(viewport(xscale=xlim, yscale=ylim,
		name="theData"))
	grid.points(x, y)
	grid.xaxis()
	grid.yaxis()
	upViewport(0)
}
playwith(gridPlot(1:10, 11:20), viewport="theData")
}}}
http://playwith.googlecode.com/files/screenshot_1-06_grid.png

== acting like a dialog box (confirm close) ==
{{{
## acting like a dialog box (confirm close)
subTools <- list("identify", "clear", "zoom", "zoomout", "zoomfit")
confirmClose <- function(playState) {
	if (gWidgets::gconfirm("Close window and report IDs?")) {
		cat("Indices of identified data points:\n")
		print(rbind(playState$ids)$which)
		all.ids <- do.call(rbind, playState$ids)$which
		print(all.ids)
		return(FALSE)
	} else TRUE # don't close
}
xy <- list(x=rnorm(20), y=rnorm(20))
playwith(plot(xy), on.close=confirmClose, modal=TRUE, 
	win.size=c(360, 360), show.call=FALSE, 
	top=NULL, left=subTools)
}}}
http://playwith.googlecode.com/files/screenshot_1-07_onclose.png


= see also ScreenshotsNewTools =